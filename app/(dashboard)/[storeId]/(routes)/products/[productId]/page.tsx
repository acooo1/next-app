import { redirect } from 'next/navigation';

import { Product } from '@prisma/client';

import { auth } from '@clerk/nextjs';

import ProductForm from './components/product-form';

import { prisma } from '@/lib/db';

type ProductPageProps = {
  params: { storeId: string; productId: string };
};

export default async function ProductPage({ params }: ProductPageProps) {
  const { userId } = auth();

  if (!userId) {
    redirect('/sign-in');
  }

  const product = await prisma.product.findUnique({
    where: {
      id: params.productId,
    },
    include: {
      images: true,
    },
  });

  // @ts-ignore We cannot pass a "Decimal" type to a React Client Component because it needs to be serializable.
  const productWithNumberPrice: Omit<Product, 'price'> & { price: number } = {
    ...product,
    price: parseFloat(String(product?.price)),
  };

  const categories = await prisma.category.findMany({
    where: {
      storeId: params.storeId,
    },
  });

  const sizes = await prisma.size.findMany({
    where: {
      storeId: params.storeId,
    },
  });

  const colors = await prisma.color.findMany({
    where: {
      storeId: params.storeId,
    },
  });

  return (
    <main className='flex-col'>
      <div className='flex-1 space-y-4 p-8 pt-6'>
        <ProductForm
          // @ts-ignore Unfortunately I could not find a solution to cast "price" as "number" from the type "Product" generated by Prisma
          product={productWithNumberPrice}
          categories={categories}
          sizes={sizes}
          colors={colors}
        />
      </div>
    </main>
  );
}
